{"ast":null,"code":"var _jsxFileName = \"C:\\\\udit\\\\bsc-payment-gateway\\\\src\\\\components\\\\PaymentGateway.js\",\n  _s = $RefreshSig$();\nimport { ethers } from \"ethers\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentGateway = () => {\n  _s();\n  const [paymentStatus, setPaymentStatus] = useState(\"\");\n\n  // Binance Smart Chain USDT & USDC contract addresses\n  const TOKEN_CONTRACTS = {\n    USDT: \"0x55d398326f99059fF775485246999027B3197955\",\n    USDC: \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"\n  };\n  const payWithToken = async token => {\n    if (!window.ethereum) {\n      alert(\"Please install Metamask.\");\n      return;\n    }\n    try {\n      // Connect to Metamask & Switch to BSC\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      await provider.send(\"wallet_switchEthereumChain\", [{\n        chainId: \"0x38\"\n      }]);\n      const signer = await provider.getSigner();\n      const contractAddress = TOKEN_CONTRACTS[token];\n      if (!contractAddress) {\n        setPaymentStatus(\"Invalid token selection.\");\n        return;\n      }\n\n      // Load Token Contract (BEP-20)\n      const erc20ABI = [\"function transfer(address to, uint256 value) public returns (bool)\"];\n      const tokenContract = new ethers.Contract(contractAddress, erc20ABI, signer);\n\n      // Define Transaction Details\n      const recipient = \"YOUR_WALLET_ADDRESS\"; // Replace with your wallet\n      const amount = ethers.parseUnits(\"1.0\", 18); // Adjust decimals if needed\n\n      // Execute Transfer\n      const tx = await tokenContract.transfer(recipient, amount);\n      setPaymentStatus(\"Payment in progress...\");\n      await tx.wait();\n      setPaymentStatus(\"Payment successful!\");\n    } catch (error) {\n      console.error(\"Payment failed:\", error);\n      setPaymentStatus(`Payment failed: ${error.reason || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pay with USDT or USDC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => payWithToken(\"USDT\"),\n      children: \"Pay with USDT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => payWithToken(\"USDC\"),\n      children: \"Pay with USDC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: paymentStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n};\n_s(PaymentGateway, \"e6h6mqQXDjkMpSUUKgx6elOm5Zo=\");\n_c = PaymentGateway;\nexport default PaymentGateway;\nvar _c;\n$RefreshReg$(_c, \"PaymentGateway\");","map":{"version":3,"names":["ethers","useState","jsxDEV","_jsxDEV","PaymentGateway","_s","paymentStatus","setPaymentStatus","TOKEN_CONTRACTS","USDT","USDC","payWithToken","token","window","ethereum","alert","provider","BrowserProvider","send","chainId","signer","getSigner","contractAddress","erc20ABI","tokenContract","Contract","recipient","amount","parseUnits","tx","transfer","wait","error","console","reason","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/udit/bsc-payment-gateway/src/components/PaymentGateway.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport { useState } from \"react\";\r\n\r\nconst PaymentGateway = () => {\r\n\tconst [paymentStatus, setPaymentStatus] = useState(\"\");\r\n\r\n\t// Binance Smart Chain USDT & USDC contract addresses\r\n\tconst TOKEN_CONTRACTS = {\r\n\t\tUSDT: \"0x55d398326f99059fF775485246999027B3197955\",\r\n\t\tUSDC: \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\",\r\n\t};\r\n\r\n\tconst payWithToken = async (token) => {\r\n\t\tif (!window.ethereum) {\r\n\t\t\talert(\"Please install Metamask.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Connect to Metamask & Switch to BSC\r\n\t\t\tconst provider = new ethers.BrowserProvider(window.ethereum);\r\n\t\t\tawait provider.send(\"wallet_switchEthereumChain\", [{ chainId: \"0x38\" }]);\r\n\r\n\t\t\tconst signer = await provider.getSigner();\r\n\t\t\tconst contractAddress = TOKEN_CONTRACTS[token];\r\n\r\n\t\t\tif (!contractAddress) {\r\n\t\t\t\tsetPaymentStatus(\"Invalid token selection.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Load Token Contract (BEP-20)\r\n\t\t\tconst erc20ABI = [\r\n\t\t\t\t\"function transfer(address to, uint256 value) public returns (bool)\",\r\n\t\t\t];\r\n\t\t\tconst tokenContract = new ethers.Contract(\r\n\t\t\t\tcontractAddress,\r\n\t\t\t\terc20ABI,\r\n\t\t\t\tsigner\r\n\t\t\t);\r\n\r\n\t\t\t// Define Transaction Details\r\n\t\t\tconst recipient = \"YOUR_WALLET_ADDRESS\"; // Replace with your wallet\r\n\t\t\tconst amount = ethers.parseUnits(\"1.0\", 18); // Adjust decimals if needed\r\n\r\n\t\t\t// Execute Transfer\r\n\t\t\tconst tx = await tokenContract.transfer(recipient, amount);\r\n\t\t\tsetPaymentStatus(\"Payment in progress...\");\r\n\r\n\t\t\tawait tx.wait();\r\n\t\t\tsetPaymentStatus(\"Payment successful!\");\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Payment failed:\", error);\r\n\t\t\tsetPaymentStatus(`Payment failed: ${error.reason || error.message}`);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Pay with USDT or USDC</h2>\r\n\t\t\t<button onClick={() => payWithToken(\"USDT\")}>Pay with USDT</button>\r\n\t\t\t<button onClick={() => payWithToken(\"USDC\")}>Pay with USDC</button>\r\n\t\t\t<p>{paymentStatus}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PaymentGateway;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}