{"ast":null,"code":"import { ethers } from \"ethers\";\nconst provider = new ethers.BrowserProvider(window.ethereum);\nconst signer = await provider.getSigner();\nconst usdtAddress = \"0x55d398326f99059ff775485246999027b3197955\"; // USDT BSC\nconst usdcAddress = \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"; // USDC BSC\nconst recipient = \"0x09A0C44E5f206b3220C70b4b0236fBC5e01f2AA1\";\nconst erc20Abi = [\"function balanceOf(address) view returns (uint256)\", \"function transfer(address to, uint amount) returns (bool)\", \"function decimals() view returns (uint8)\", \"function allowance(address owner, address spender) view returns (uint256)\", \"function approve(address spender, uint256 amount) returns (bool)\"];\nasync function pay() {\n  try {\n    await provider.send(\"eth_requestAccounts\", []);\n    const token = document.getElementById(\"token\").value;\n    const amount = parseFloat(document.getElementById(\"amount\").value);\n    if (!token || !amount) {\n      alert(\"Please select a token and enter an amount\");\n      return;\n    }\n    const tokenAddress = token === \"USDT\" ? usdtAddress : usdcAddress;\n    const contract = new ethers.Contract(tokenAddress, erc20Abi, signer);\n    const decimals = await contract.decimals();\n    const amountToSend = ethers.parseUnits(amount.toString(), decimals);\n    const balance = await contract.balanceOf(await signer.getAddress());\n    if (balance < amountToSend) {\n      alert(\"Insufficient balance\");\n      return;\n    }\n    const allowance = await contract.allowance(await signer.getAddress(), recipient);\n    if (allowance < amountToSend) {\n      const approveTx = await contract.approve(recipient, amountToSend);\n      await approveTx.wait();\n    }\n    const tx = await contract.transfer(recipient, amountToSend);\n    await tx.wait();\n    alert(\"Payment successful!\");\n  } catch (error) {\n    console.error(error);\n    alert(\"Payment failed: \" + error.message);\n  }\n}","map":{"version":3,"names":["ethers","provider","BrowserProvider","window","ethereum","signer","getSigner","usdtAddress","usdcAddress","recipient","erc20Abi","pay","send","token","document","getElementById","value","amount","parseFloat","alert","tokenAddress","contract","Contract","decimals","amountToSend","parseUnits","toString","balance","balanceOf","getAddress","allowance","approveTx","approve","wait","tx","transfer","error","console","message"],"sources":["C:/udit/bsc-payment-gateway/src/components/PaymentGateway.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\n\r\nconst provider = new ethers.BrowserProvider(window.ethereum);\r\nconst signer = await provider.getSigner();\r\nconst usdtAddress = \"0x55d398326f99059ff775485246999027b3197955\"; // USDT BSC\r\nconst usdcAddress = \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"; // USDC BSC\r\nconst recipient = \"0x09A0C44E5f206b3220C70b4b0236fBC5e01f2AA1\";\r\nconst erc20Abi = [\r\n\t\"function balanceOf(address) view returns (uint256)\",\r\n\t\"function transfer(address to, uint amount) returns (bool)\",\r\n\t\"function decimals() view returns (uint8)\",\r\n\t\"function allowance(address owner, address spender) view returns (uint256)\",\r\n\t\"function approve(address spender, uint256 amount) returns (bool)\",\r\n];\r\n\r\nasync function pay() {\r\n\ttry {\r\n\t\tawait provider.send(\"eth_requestAccounts\", []);\r\n\t\tconst token = document.getElementById(\"token\").value;\r\n\t\tconst amount = parseFloat(document.getElementById(\"amount\").value);\r\n\t\tif (!token || !amount) {\r\n\t\t\talert(\"Please select a token and enter an amount\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst tokenAddress = token === \"USDT\" ? usdtAddress : usdcAddress;\r\n\t\tconst contract = new ethers.Contract(tokenAddress, erc20Abi, signer);\r\n\r\n\t\tconst decimals = await contract.decimals();\r\n\t\tconst amountToSend = ethers.parseUnits(amount.toString(), decimals);\r\n\t\tconst balance = await contract.balanceOf(await signer.getAddress());\r\n\t\tif (balance < amountToSend) {\r\n\t\t\talert(\"Insufficient balance\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst allowance = await contract.allowance(\r\n\t\t\tawait signer.getAddress(),\r\n\t\t\trecipient\r\n\t\t);\r\n\t\tif (allowance < amountToSend) {\r\n\t\t\tconst approveTx = await contract.approve(recipient, amountToSend);\r\n\t\t\tawait approveTx.wait();\r\n\t\t}\r\n\r\n\t\tconst tx = await contract.transfer(recipient, amountToSend);\r\n\t\tawait tx.wait();\r\n\t\talert(\"Payment successful!\");\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\talert(\"Payment failed: \" + error.message);\r\n\t}\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,QAAQ,GAAG,IAAID,MAAM,CAACE,eAAe,CAACC,MAAM,CAACC,QAAQ,CAAC;AAC5D,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,SAAS,CAAC,CAAC;AACzC,MAAMC,WAAW,GAAG,4CAA4C,CAAC,CAAC;AAClE,MAAMC,WAAW,GAAG,4CAA4C,CAAC,CAAC;AAClE,MAAMC,SAAS,GAAG,4CAA4C;AAC9D,MAAMC,QAAQ,GAAG,CAChB,oDAAoD,EACpD,2DAA2D,EAC3D,0CAA0C,EAC1C,2EAA2E,EAC3E,kEAAkE,CAClE;AAED,eAAeC,GAAGA,CAAA,EAAG;EACpB,IAAI;IACH,MAAMV,QAAQ,CAACW,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC9C,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,KAAK;IACpD,MAAMC,MAAM,GAAGC,UAAU,CAACJ,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC;IAClE,IAAI,CAACH,KAAK,IAAI,CAACI,MAAM,EAAE;MACtBE,KAAK,CAAC,2CAA2C,CAAC;MAClD;IACD;IAEA,MAAMC,YAAY,GAAGP,KAAK,KAAK,MAAM,GAAGN,WAAW,GAAGC,WAAW;IACjE,MAAMa,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,QAAQ,CAACF,YAAY,EAAEV,QAAQ,EAAEL,MAAM,CAAC;IAEpE,MAAMkB,QAAQ,GAAG,MAAMF,QAAQ,CAACE,QAAQ,CAAC,CAAC;IAC1C,MAAMC,YAAY,GAAGxB,MAAM,CAACyB,UAAU,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAEH,QAAQ,CAAC;IACnE,MAAMI,OAAO,GAAG,MAAMN,QAAQ,CAACO,SAAS,CAAC,MAAMvB,MAAM,CAACwB,UAAU,CAAC,CAAC,CAAC;IACnE,IAAIF,OAAO,GAAGH,YAAY,EAAE;MAC3BL,KAAK,CAAC,sBAAsB,CAAC;MAC7B;IACD;IAEA,MAAMW,SAAS,GAAG,MAAMT,QAAQ,CAACS,SAAS,CACzC,MAAMzB,MAAM,CAACwB,UAAU,CAAC,CAAC,EACzBpB,SACD,CAAC;IACD,IAAIqB,SAAS,GAAGN,YAAY,EAAE;MAC7B,MAAMO,SAAS,GAAG,MAAMV,QAAQ,CAACW,OAAO,CAACvB,SAAS,EAAEe,YAAY,CAAC;MACjE,MAAMO,SAAS,CAACE,IAAI,CAAC,CAAC;IACvB;IAEA,MAAMC,EAAE,GAAG,MAAMb,QAAQ,CAACc,QAAQ,CAAC1B,SAAS,EAAEe,YAAY,CAAC;IAC3D,MAAMU,EAAE,CAACD,IAAI,CAAC,CAAC;IACfd,KAAK,CAAC,qBAAqB,CAAC;EAC7B,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBjB,KAAK,CAAC,kBAAkB,GAAGiB,KAAK,CAACE,OAAO,CAAC;EAC1C;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}